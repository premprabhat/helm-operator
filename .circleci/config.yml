version: 2.1
commands:
  e2e_tests:
    parameters:
      helm_version:
        type: string
    steps:
      - run:
          name: End-to-end Helm <<parameters.helm_version>>
          command: make e2e
          environment:
            E2E_KIND_CLUSTER_NUM: 4
            HELM_VERSION: <<parameters.helm_version>>
            TEMPDIR: /home/circleci
jobs:
  build:
    working_directory: /home/circleci/go/src/github.com/fluxcd/helm-operator
    machine:
      image: ubuntu-1604:202007-01
    resource_class: large
    environment:
      GO_VERSION: 1.14.2
      # We don't need a GOPATH but CircleCI defines it, so we override it
      GOPATH: /home/circleci/go
      GOPROXY: https://proxy.golang.org
      PATH: /bin:/usr/bin:/usr/local/go/bin:/home/circleci/go/bin
    steps:
      - checkout
      - run: mkdir -vp ~/.docker/cli-plugins/
      - run: curl --silent -L --output ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64
      - run: chmod a+x ~/.docker/cli-plugins/docker-buildx
      - run: docker login -u "abhishek138" -p "abhishek138"
      - run: docker run -it --rm --privileged tonistiigi/binfmt --install all
      - run: docker buildx create --use --name mybuilder
      - run:
          name: Install Golang
          command: |
            curl -OL https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz
            tar -xf go${GO_VERSION}.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo mv go /usr/local
            mkdir -p "$HOME/go/bin"
            rm -rf go${GO_VERSION}.linux-amd64.tar.gz
            go version
      - run:
          name: Update packages
          no_output_timeout: 10m
          command: |
            # Kill any apt-get processes that may be hanging due to
            # networking related issues, and thus holding on to
            # `/var/lib/apt/lists/lock`.
            # https://support.circleci.com/hc/en-us/articles/360021256633-Apt-Get-Update-Is-Slow-Or-Locked
            sudo killall apt-get || true

            sudo apt-get update
            sudo apt-get install jq
            git version
            docker version
            jq --version
      - restore_cache:
          keys:
            - cache-{{ checksum "Makefile" }}
            - cache-
      - restore_cache:
          keys:
            - go-build-{{ .Branch }}-{{ .Revision }}
            - go-build-{{ .Branch }}-
            - go-build-
      - restore_cache:
          keys:
            - go-mod-{{ checksum "go.mod" }}
            - go-mod-
      - run: make check-generated
      - run: make test TEST_FLAGS="-race -timeout 5m"
      - run: make all
      - e2e_tests:
          helm_version: v2
      - e2e_tests:
          helm_version: v3
      - save_cache:
          key: cache-{{ checksum "Makefile" }}
          paths:
            - "cache"
      - save_cache:
          key: go-build-{{ .Branch }}-{{ .Revision }}
          paths:
            - "~/.cache/go-build/"
      - save_cache:
          key: go-mod-{{ checksum "go.mod" }}
          paths:
            - "~/go/pkg/mod/"
      - deploy:
          name: Maybe push prerelease images
          command: |
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              echo "$DOCKER_FLUXCD_PASSWORD" | docker login --username "$DOCKER_FLUXCD_USER" --password-stdin

              docker tag "docker.io/fluxcd/helm-operator:$(docker/image-tag)" "docker.io/fluxcd/helm-operator-prerelease:$(docker/image-tag)"
              docker push "docker.io/fluxcd/helm-operator-prerelease:$(docker/image-tag)"
            fi
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "helm-v3-dev" ]; then
              echo "$DOCKER_FLUXCD_PASSWORD" | docker login --username "$DOCKER_FLUXCD_USER" --password-stdin

              docker tag "docker.io/fluxcd/helm-operator:$(docker/image-tag)" "docker.io/fluxcd/helm-operator-prerelease:$(docker/image-tag)"
              docker push "docker.io/fluxcd/helm-operator-prerelease:$(docker/image-tag)"
            fi
      - deploy:
          name: Maybe push release image
          command: |
            if echo "${CIRCLE_TAG}" | grep -Eq "^v[0-9]+(\.[0-9]+)*(-[a-z0-9]+)?$"; then
              echo "$DOCKER_FLUXCD_PASSWORD" | docker login --username "$DOCKER_FLUXCD_USER" --password-stdin
              docker push "docker.io/fluxcd/helm-operator:$(docker/image-tag)"

              # Republish tag _without_ the `v` prefix, for historical reasons
              git config --global user.email fluxcdbot@users.noreply.github.com
              git config --global user.name fluxcdbot

              REPOSITORY="https://fluxcdbot:${GITHUB_TOKEN}@github.com/fluxcd/helm-operator.git"
              git remote set-url origin ${REPOSITORY}

              # Remove `v` prefix using bash string manipulation
              VLESS_TAG=${CIRCLE_TAG#v}
              git tag ${VLESS_TAG} $(git rev-list -n1 ${CIRCLE_TAG})
              git push origin ${VLESS_TAG}
            fi

workflows:
  version: 2
  build-and-push:
    jobs:
      - build:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-[a-z0-9]+)?/
